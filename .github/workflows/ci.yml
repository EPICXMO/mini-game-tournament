name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop, 'feature/*' ]
  pull_request:
    branches: [ main, develop ]

env:
  UNITY_VERSION: 2022.3.21f1
  UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}

jobs:
  # Backend Tests
  backend-test:
    name: Backend Tests
    runs-on: ubuntu-latest
    
    defaults:
      run:
        working-directory: ./backend
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: minigamehub_test
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: backend/package-lock.json
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run linting
      run: npm run lint
      
    - name: Run tests
      run: npm test
      env:
        NODE_ENV: test
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/minigamehub_test
        
    - name: Check server starts
      run: |
        timeout 30s npm start &
        sleep 10
        curl -f http://localhost:4000/healthz || exit 1
        pkill -f "node src/server.js" || true

  # Unity Build Test
  unity-build:
    name: Unity Build Test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        scene: [Lobby, Jetpack]
        include:
          - scene: Lobby
            scene_path: "Assets/Scenes/Lobby.unity"
            build_name: "lobby-build"
          - scene: Jetpack
            scene_path: "Assets/MiniGames/Jetpack/Jetpack.unity"
            build_name: "jetpack-build"
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        lfs: true
        
    - name: Cache Unity Library
      uses: actions/cache@v3
      with:
        path: unity/MiniGameHub/Library
        key: Library-${{ matrix.scene }}-${{ hashFiles('unity/MiniGameHub/Assets/**', 'unity/MiniGameHub/Packages/**', 'unity/MiniGameHub/ProjectSettings/**') }}
        restore-keys: |
          Library-${{ matrix.scene }}-
          Library-
          
    - name: Setup Unity - Build ${{ matrix.scene }}
      uses: game-ci/unity-builder@v4
      env:
        UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
        UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
        UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
      with:
        projectPath: unity/MiniGameHub
        targetPlatform: StandaloneWindows64
        buildMethod: UnityBuilderAction.BuildScript.Build
        allowDirtyBuild: true
        customParameters: -sceneList "${{ matrix.scene_path }}"
        
    - name: Upload Unity Build Artifact - ${{ matrix.scene }}
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: unity-${{ matrix.build_name }}-windows
        path: build/
        retention-days: 1

  # Code Quality
  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: backend/package-lock.json
        
    - name: Install backend dependencies
      working-directory: ./backend
      run: npm ci
      
    - name: Run Prettier check
      working-directory: ./backend
      run: npx prettier --check src/
      
    - name: Run ESLint
      working-directory: ./backend
      run: npm run lint

  # Security Scan
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run npm audit
      working-directory: ./backend
      run: npm audit --audit-level=high
      continue-on-error: true
      
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: './backend'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # Docker Build Test
  docker-build:
    name: Docker Build Test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        file: ./backend/Dockerfile
        push: false
        tags: minigamehub-server:test
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Test Docker container
      run: |
        docker run -d --name test-container -p 4000:4000 minigamehub-server:test
        sleep 10
        curl -f http://localhost:4000/healthz || exit 1
        docker stop test-container

  # Deployment (only on main branch)
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: [backend-test, unity-build, code-quality, security-scan, docker-build]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Deploy to staging
      run: |
        echo "ðŸš€ Deploying to staging environment..."
        echo "This would typically deploy to your cloud provider"
        echo "For now, this is a placeholder for future deployment steps"